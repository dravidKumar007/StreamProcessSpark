
import org.apache.spark.sql.SparkSession
import org.apache.spark.streaming.{Seconds, StreamingContext}
import com.datastax.spark.connector._
import org.apache.kafka.common.serialization.StringDeserializer
import org.apache.spark.streaming.kafka010._

val spark = SparkSession.builder().getOrCreate() 
val ssc = new StreamingContext(spark.sparkContext, Seconds(10)) 
val kafkaParams = Map[String, Object](
  "bootstrap.servers" -> "localhost:9092",
  "key.deserializer" -> classOf[StringDeserializer],
  "value.deserializer" -> classOf[StringDeserializer],
  "group.id" -> "kafka-to-cassandra-group",
  "auto.offset.reset" -> "latest",
  "enable.auto.commit" -> (false: java.lang.Boolean)
)

val topics = Array("userVisited")

val kafkaStream = KafkaUtils.createDirectStream[String, String](
  ssc,
  LocationStrategies.PreferConsistent,
  ConsumerStrategies.Subscribe[String, String](topics, kafkaParams)
)

kafkaStream.foreachRDD { rdd =>
  val cassandraRDD = rdd.map(record => (record.key(), record.value(),1))
  
  cassandraRDD.saveToCassandra(
    "customervists", "customer_visits", 
    SomeColumns("product_id", "customer_email","visit_count")
  )
}
ssc.start()
ssc.awaitTermination()
